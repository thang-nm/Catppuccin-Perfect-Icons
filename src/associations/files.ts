export const files: IconMap = {
  adonis: ['.adonisrc.json', 'ace'],
  alex: ['.alexrc', '.alexrc.yml', '.alexrc.yaml', 'alexrc.js'],
  android: ['androidmanifest.xml'],
  angular: ['angular-cli.json', '.angular-cli.json', 'angular.json'],
  ansible: ['ansible.cfg', '.ansible-lint', 'ansible-lint.yml'],
  apollo: ['apollo.config.js', 'apollo.config.ts'],
  appveyor: ['.appveyor.yml', 'appveyor.yml'],
  artistic_style: ['.astylerc'],
  astro_config: [
    'astro.config.js',
    'astro.config.mjs',
    'astro.config.cjs',
    'astro.config.ts',
    'astro.config.cts',
    'astro.config.mts',
  ],
  aurelia: ['aurelia.json'],
  auto: [
    '.autorc',
    'auto.config.js',
    'auto.config.ts',
    'auto-config.json',
    'auto-config.yaml',
    'auto-config.yml',
    'auto-config.ts',
    'auto-config.js',
  ],
  azure_pipelines: [
    'azure-pipelines.yml',
    'azure-pipelines.yaml',
    'azure-pipelines-main.yml',
    'azure-pipelines-main.yaml',
  ],
  babel: [
    '.babelrc',
    '.babelrc.cjs',
    '.babelrc.js',
    '.babelrc.mjs',
    '.babelrc.json',
    'babel.config.cjs',
    'babel.config.js',
    'babel.config.mjs',
    'babel.config.json',
    'babel-transform.js',
    '.babel-plugin-macrosrc',
    '.babel-plugin-macrosrc.json',
    '.babel-plugin-macrosrc.yaml',
    '.babel-plugin-macrosrc.yml',
    '.babel-plugin-macrosrc.js',
    'babel-plugin-macros.config.js',
  ],
  bash: ['commit-msg', 'pre-commit', 'pre-push', 'post-merge'],
  bazel: ['.bazelignore', '.bazelrc', '.bazelversion'],
  bazel_ignore: ['.bazelignore'],
  biome: ['biome.json'],
  bitbucket: ['bitbucket-pipelines.yaml', 'bitbucket-pipelines.yml'],
  bithound: ['.bithoundrc'],
  blitz: ['blitz.config.js', 'blitz.config.ts', '.blitz.config.compiled.js'],
  bower: ['.bowerrc', 'bower.json'],
  browserslist: ['browserslist', '.browserslistrc'],
  buildkite: ['buildkite.yml', 'buildkite.yaml'],
  buck: ['.buckconfig'],
  bun: ['bunfig.toml'],
  bun_lock: ['bun.lockb'],
  cabal: [
    'cabal.project',
    'cabal.project.freeze',
    'cabal.project.local',
  ],
  caddy: ['Caddyfile'],
  cakephp: ['bin/cake'],
  capacitor: ['capacitor.config.json', 'capacitor.config.ts'],
  cargo: ['cargo.toml'],
  cargo_lock: ['cargo.lock'],
  changelog: [
    'changelog',
    'changelog.md',
    'changelog.rst',
    'changelog.txt',
    'changes',
    'changes.md',
    'changes.rst',
    'changes.txt',
  ],
  chart: ['chart.yaml'],
  chart_lock: ['chart.lock'],
  circle_ci: ['circle.yml'],
  cmake: ['cmakelists.txt', 'cmakecache.txt'],
  cocoapods: ['podfile'],
  cocoapods_lock: ['podfile.lock'],
  code_of_conduct: [
    'code_of_conduct.md',
    'code_of_conduct.txt',
    'code_of_conduct',
  ],
  code_climate: ['.codeclimate.yml'],
  codecov: ['.codecov.yml', 'codecov.yml'],
  codeowners: ['codeowners', 'owners'],
  command: ['command'],
  commitlint: [
    '.commitlintrc',
    '.commitlintrc.js',
    '.commitlintrc.cjs',
    '.commitlintrc.ts',
    '.commitlintrc.cts',
    '.commitlintrc.json',
    '.commitlintrc.yaml',
    '.commitlintrc.yml',
    '.commitlint.yaml',
    '.commitlint.yml',
    'commitlint.config.js',
    'commitlint.config.cjs',
    'commitlint.config.ts',
    'commitlint.config.cts',
  ],
  contributing: [
    'contributing',
    'contributing.md',
    'contributing.rst',
    'contributing.txt',
  ],
  craco: [
    'craco.config.ts',
    'craco.config.js',
    'craco.config.cjs',
    '.cracorc.ts',
    '.cracorc.js',
    '.cracorc',
  ],
  cypress: [
    'cypress.json',
    'cypress.env.json',
    'cypress.config.ts',
    'cypress.config.js',
    'cypress.config.cjs',
    'cypress.config.mjs',
  ],
  dart: ['.pubignore'],
  dart_generated: ['freezed.dart', 'g.dart'],
  deno: ['deno.json', 'deno.jsonc'],
  deno_lock: ['deno.lock'],
  dependabot: ['dependabot.yml', 'dependabot.yaml'],
  detox: [
    '.detoxrc',
    '.detoxrc.js',
    '.detoxrc.json',
    'detox.config.js',
    'detox.config.json',
  ],
  docker: [
    'dockerfile',
    'dockerfile',
    'dockerfile.prod',
    'dockerfile.production',
    'dockerfile.alpha',
    'dockerfile.beta',
    'dockerfile.stage',
    'dockerfile.staging',
    'dockerfile.dev',
    'dockerfile.development',
    'dockerfile.local',
    'dockerfile.test',
    'dockerfile.testing',
    'dockerfile.ci',
    'dockerfile.web',
    'dockerfile.worker',
  ],
  docker_compose: [
    'docker-compose.yml',
    'docker-compose.override.yml',
    'docker-compose.prod.yml',
    'docker-compose.production.yml',
    'docker-compose.alpha.yml',
    'docker-compose.beta.yml',
    'docker-compose.stage.yml',
    'docker-compose.staging.yml',
    'docker-compose.dev.yml',
    'docker-compose.development.yml',
    'docker-compose.local.yml',
    'docker-compose.test.yml',
    'docker-compose.testing.yml',
    'docker-compose.ci.yml',
    'docker-compose.web.yml',
    'docker-compose.worker.yml',
    'docker-compose.yaml',
    'docker-compose.override.yaml',
    'docker-compose.prod.yaml',
    'docker-compose.production.yaml',
    'docker-compose.alpha.yaml',
    'docker-compose.beta.yaml',
    'docker-compose.stage.yaml',
    'docker-compose.staging.yaml',
    'docker-compose.dev.yaml',
    'docker-compose.development.yaml',
    'docker-compose.local.yaml',
    'docker-compose.test.yaml',
    'docker-compose.testing.yaml',
    'docker-compose.ci.yaml',
    'docker-compose.web.yaml',
    'docker-compose.worker.yaml',
  ],
  docker_ignore: ['dockerignore', '.dockerignore'],
  docusaurus: ['docusaurus.config.js'],
  editorconfig: ['.editorconfig'],
  ember: ['.ember-cli', '.ember-cli.js', 'ember-cli-builds.js'],
  env: [
    '.env',
    '.env.defaults',
    '.env.example',
    '.env.sample',
    '.env.template',
    '.env.schema',
    '.env.local',
    '.env.dev',
    '.env.development',
    '.env.alpha',
    '.env.e2e',
    '.env.qa',
    '.env.dist',
    '.env.prod',
    '.env.production',
    '.env.stage',
    '.env.staging',
    '.env.preview',
    '.env.test',
    '.env.testing',
    '.env.development.local',
    '.env.qa.local',
    '.env.production.local',
    '.env.staging.local',
    '.env.test.local',
    '.env.uat',
    '.env.cypress',
  ],
  esbuild: [
    'esbuild.js',
    'esbuild.ts',
    'esbuild.cjs',
    'esbuild.mjs',
    'esbuild.config.js',
    'esbuild.config.ts',
    'esbuild.config.cjs',
    'esbuild.config.mjs',
  ],
  eslint: [
    '.eslintrc.js',
    '.eslintrc.cjs',
    '.eslintrc.yaml',
    '.eslintrc.yml',
    '.eslintrc.json',
    '.eslintrc-md.js',
    '.eslintrc-jsdoc.js',
    '.eslintrc',
    'eslint.config.js',
  ],
  eslint_ignore: ['.eslintignore', '.eslintcache'],
  fastlane: ['fastfile', 'fastlane/appfile', 'fastlane/pluginfile'],
  favicon: ['favicon.ico'],
  firebase: [
    'firebase.json',
    '.firebaserc',
    'firestore.rules',
    'firestore.indexes.json',
  ],
  flow: ['.flowconfig'],
  gatsby: [
    'gatsby-config.js',
    'gatsby-config.mjs',
    'gatsby-config.ts',
    'gatsby-node.js',
    'gatsby-node.mjs',
    'gatsby-node.ts',
    'gatsby-browser.js',
    'gatsby-browser.tsx',
    'gatsby-ssr.js',
    'gatsby-ssr.tsx',
  ],
  gcp: ['.gcloudignore'],
  git: [
    '.gitignore',
    '.gitconfig',
    '.gitattributes',
    '.gitmodules',
    '.gitkeep',
    '.git-include',
  ],
  gitbook: ['.gitbook.yaml'],
  gitlab: ['.gitlab-ci.yml'],
  gitpod: ['.gitpod.yml'],
  gleam: ['gleam.toml'],
  go_mod: ['go.mod', 'go.sum', 'go.work', 'go.work.sum'],
  gradle: ['gradle.properties', 'gradlew', 'gradle-wrapper.properties'],
  graphql: [
    '.graphqlconfig',
    '.graphqlrc',
    '.graphqlrc.json',
    '.graphqlrc.js',
    '.graphqlrc.cjs',
    '.graphqlrc.ts',
    '.graphqlrc.toml',
    '.graphqlrc.yaml',
    '.graphqlrc.yml',
    'graphql.config.json',
    'graphql.config.js',
    'graphql.config.ts',
    'graphql.config.toml',
    'graphql.config.yaml',
    'graphql.config.yml',
  ],
  gridsome: ['gridsome.config.js', 'gridsome.server.js'],
  gulp: [
    'gulpfile.js',
    'gulpfile.mjs',
    'gulpfile.ts',
    'gulpfile.cts',
    'gulpfile.mts',
    'gulpfile.babel.js',
  ],
  helm: ['.helmignore'],
  heroku: ['procfile', 'procfile.windows'],
  htaccess: ['.htaccess'],
  ionic: ['ionic.config.json', '.io-config.json'],
  javascript_config: ['jsconfig.json'],
  jenkins: ['jenkinsfile'],
  jest: [
    'jest.config.js',
    'jest.config.cjs',
    'jest.config.mjs',
    'jest.config.ts',
    'jest.config.cts',
    'jest.config.mts',
    'jest.config.json',
    'jest.e2e.config.js',
    'jest.e2e.config.cjs',
    'jest.e2e.config.mjs',
    'jest.e2e.config.ts',
    'jest.e2e.config.cts',
    'jest.e2e.config.mts',
    'jest.e2e.config.json',
    'jest.e2e.json',
    'jest-unit.config.js',
    'jest-e2e.config.js',
    'jest-e2e.config.cjs',
    'jest-e2e.config.mjs',
    'jest-e2e.config.ts',
    'jest-e2e.config.cts',
    'jest-e2e.config.mts',
    'jest-e2e.config.json',
    'jest-e2e.json',
    'jest-github-actions-reporter.js',
    'jest.setup.js',
    'jest.setup.ts',
    'jest.json',
    '.jestrc',
    '.jestrc.js',
    '.jestrc.json',
    'jest.teardown.js',
    'jest-preset.json',
    'jest-preset.js',
    'jest-preset.cjs',
    'jest-preset.mjs',
    'jest.preset.js',
    'jest.preset.mjs',
    'jest.preset.cjs',
    'jest.preset.json',
  ],
  histoire: [
    'histoire.config.ts',
    'histoire.config.js',
    '.histoire.js',
    '.histoire.ts',
  ],
  husky: [
    '.huskyrc',
    'husky.config.js',
    '.huskyrc.json',
    '.huskyrc.js',
    '.huskyrc.yaml',
    '.huskyrc.yml',
  ],
  json: [
    '.jscsrc',
    '.jshintrc',
    'composer.lock',
    '.jsbeautifyrc',
    '.esformatter',
    'cdp.pid',
    '.lintstagedrc',
    '.whitesource',
  ],
  karma: [
    'karma.conf.js',
    'karma.conf.ts',
    'karma.conf.coffee',
    'karma.config.js',
    'karma.config.ts',
    'karma-main.js',
    'karma-main.ts',
  ],
  kubernetes: [
    'k8s.yml',
    'k8s.yaml',
    'kubernetes.yml',
    'kubernetes.yaml',
    '.k8s.yml',
    '.k8s.yaml',
  ],
  laravel: ['artisan'],
  lerna: ['lerna.json'],
  license: [
    'copying',
    'copying.md',
    'copying.rst',
    'copying.txt',
    'copyright',
    'copyright.md',
    'copyright.rst',
    'copyright.txt',
    'license',
    'license-agpl',
    'license-apache',
    'license-bsd',
    'license-mit',
    'license-gpl',
    'license-lgpl',
    'license.md',
    'license.rst',
    'license.txt',
    'licence',
    'licence-agpl',
    'licence-apache',
    'licence-bsd',
    'licence-mit',
    'licence-gpl',
    'licence-lgpl',
    'licence.md',
    'licence.rst',
    'licence.txt',
  ],
  lighthouse: [
    '.lighthouserc.js',
    'lighthouserc.js',
    '.lighthouserc.json',
    'lighthouserc.json',
    '.lighthouserc.yml',
    'lighthouserc.yml',
    '.lighthouserc.yaml',
    'lighthouserc.yaml',
  ],
  lintstaged: [
    '.lintstagedrc',
    '.lintstagedrc.json',
    '.lintstagedrc.yaml',
    '.lintstagedrc.yml',
    '.lintstagedrc.mjs',
    '.lintstagedrc.cjs',
    '.lintstagedrc.js',
    'lint-staged.config.js',
    'lint-staged.config.mjs',
    'lint-staged.config.cjs',
  ],
  lua: ['.luacheckrc'],
  mail: ['.mailmap'],
  makefile: ['makefile', 'gnumakefile', 'kbuild'],
  maven: ['maven.config', 'jvm.config', 'pom.xml'],
  mercurial: [
    '.hg',
    '.hgignore',
    '.hgflow',
    '.hgrc',
    'hgrc',
    'mercurial.ini',
  ],
  meson: ['meson.build', 'meson_options.txt'],
  metro: ['metro.config.js', 'metro.config.ts'],
  mjml: ['.mjmlconfig'],
  mocha: [
    'mocha.opts',
    '.mocharc.yml',
    '.mocharc.yaml',
    '.mocharc.js',
    '.mocharc.json',
    '.mocharc.jsonc',
  ],
  modernizr: ['.modernizrrc', '.modernizrrc.js', '.modernizrrc.json'],
  moon: ['moon.yml'],
  nativescript: ['nativescript.config.ts'],
  netlify: [
    'netlify.json',
    'netlify.yml',
    'netlify.yaml',
    'netlify.toml',
  ],
  nest: [
    'nest-cli.json',
    '.nest-cli.json',
    'nestconfig.json',
    '.nestconfig.json',
  ],
  next: [
    'next.config.js',
    'next.config.mjs',
    'next.config.ts',
    'next.config.mts',
  ],
  nginx: ['nginx.conf'],
  nodemon: ['nodemon.json', 'nodemon-debug.json'],
  npm: ['.npmrc'],
  npm_ignore: ['.npmignore'],
  npm_lock: ['package-lock.json'],
  nuget: ['nuget.config', '.nuspec', 'nuget.exe'],
  nuxt: ['nuxt.config.js', 'nuxt.config.ts', '.nuxtrc'],
  nuxt_ignore: ['.nuxtignore'],
  nx: ['nx.json'],
  package_json: [
    'package.json',
    '.nvmrc',
    '.esmrc',
    '.node-version',
  ],
  panda: [
    'panda.config.ts',
    'panda.config.mjs',
    'panda.config.js',
  ],
  parse: ['.parse.local', '.parse.project'],
  payload: [
    'payload.config.js',
    'payload.config.mjs',
    'payload.config.ts',
    'payload.config.mts',
  ],
  pdm: ['pdm.toml', '.pdm-python'],
  pdm_lock: ['pdm.lock'],
  php_cs_fixer: [
    '.php_cs',
    '.php_cs.dist',
    '.php_cs.php',
    '.php_cs.dist.php',
    '.php-cs-fixer.php',
    '.php-cs-fixer.dist.php',
  ],
  phpstan: ['phpstan.neon', 'phpstan.neon.dist', 'phpstan.dist.neon'],
  phpunit: [
    '.phpunit.result.cache',
    '.phpunit-watcher.yml',
    'phpunit.xml',
    'phpunit.xml.dist',
    'phpunit-watcher.yml',
    'phpunit-watcher.yml.dist',
  ],
  plastic: [
    'plastic.branchexplorer',
    'plastic.selector',
    'plastic.wktree',
    'plastic.workspace',
    'plastic.workspaces',
  ],
  playwright: [
    'playwright.config.js',
    'playwright.config.mjs',
    'playwright.config.ts',
    'playwright-ct.config.js',
    'playwright-ct.config.mjs',
    'playwright-ct.config.ts',
  ],
  plop: [
    'plopfile.js',
    'plopfile.cjs',
    'plopfile.mjs',
    'plopfile.ts',
  ],
  pnpm: ['pnpm-workspace.yaml', '.pnpmfile.cjs'],
  pnpm_lock: ['pnpm-lock.yaml'],
  poetry: ['poetry.lock'],
  postcss: [
    'postcss.config.js',
    'postcss.config.cjs',
    'postcss.config.mjs',
    'postcss.config.ts',
    'postcss.config.cts',
    '.postcssrc.js',
    '.postcssrc.cjs',
    '.postcssrc.ts',
    '.postcssrc.cts',
    '.postcssrc',
    '.postcssrc.json',
    '.postcssrc.yaml',
    '.postcssrc.yml',
  ],
  posthtml: [
    'posthtml.config.js',
    '.posthtmlrc.js',
    '.posthtmlrc',
    '.posthtmlrc.json',
    '.posthtmlrc.yml',
  ],
  premake: ['premake4.lua', 'premake5.lua', 'premake.lua'],
  prettier: [
    '.prettierrc',
    'prettier.config.js',
    'prettier.config.cjs',
    '.prettierrc.js',
    '.prettierrc.cjs',
    '.prettierrc.json',
    '.prettierrc.json5',
    '.prettierrc.yaml',
    '.prettierrc.yml',
    '.prettierignore',
    '.prettierrc.toml',
  ],
  prettier_ignore: ['.prettierignore'],
  prisma: ['prisma.yml'],
  properties: [
    '.clang-format',
    '.clang-tidy',
  ],
  pug: ['.pug-lintrc', '.pug-lintrc.js', '.pug-lintrc.json'],
  puppeteer: [
    '.puppeteerrc.cjs',
    '.puppeteerrc.js',
    '.puppeteerrc',
    '.puppeteerrc.json,',
    '.puppeteerrc.yaml',
    'puppeteer.config.js',
    'puppeteer.config.cjs',
  ],
  python_misc: [
    'requirements.txt',
    'pipfile',
    '.python-version',
    'manifest.in',
    'pylintrc',
    '.pylintrc',
    'pyproject.toml',
  ],
  quasar: ['quasar.conf.js', 'quasar.config.js'],
  r: ['.Rhistory'],
  reactnative_config: ['react-native.config.js', 'react-native.config.ts'],
  readme: ['readme.md', 'readme.rst', 'readme.txt', 'readme'],
  redwood: ['redwood.toml'],
  remix: ['remix.config.js', 'remix.config.ts'],
  renovate: [
    '.renovaterc',
    '.renovaterc.json',
    'renovate-config.json',
    'renovate.json',
    'renovate.json5',
  ],
  replit: ['.replit'],
  robots: ['robots.txt'],
  rollup: [
    'rollup.config.js',
    'rollup.config.mjs',
    'rollup.config.ts',
    'rollup-config.js',
    'rollup-config.mjs',
    'rollup-config.ts',
    'rollup.config.common.js',
    'rollup.config.common.mjs',
    'rollup.config.common.ts',
    'rollup.config.base.js',
    'rollup.config.base.mjs',
    'rollup.config.base.ts',
    'rollup.config.prod.js',
    'rollup.config.prod.mjs',
    'rollup.config.prod.ts',
    'rollup.config.dev.js',
    'rollup.config.dev.mjs',
    'rollup.config.dev.ts',
    'rollup.config.prod.vendor.js',
    'rollup.config.prod.vendor.mjs',
    'rollup.config.prod.vendor.ts',
  ],
  rome: ['rome.json'],
  rubocop: ['.rubocop.yml', '.rubocop-todo.yml', '.rubocop_todo.yml'],
  ruby: ['.ruby-version'],
  ruby_gem: ['gemfile'],
  ruby_gem_lock: ['gemfile.lock'],
  rspec: ['.rspec'],
  semantic_release: [
    '.releaserc',
    '.releaserc.yaml',
    '.releaserc.yml',
    '.releaserc.json',
    '.releaserc.js',
    '.releaserc.cjs',
    'release.config.js',
    'release.config.cjs',
  ],
  semgrep: ['semgrep.yml'],
  semgrep_ignore: ['.semgrepignore'],
  sentry: ['.sentryclirc'],
  sequelize: ['.sequelizerc'],
  serverless: [
    'serverless.yml',
    'serverless.yaml',
    'serverless.json',
    'serverless.js',
    'serverless.ts',
  ],
  snowpack: [
    'snowpack.config.js',
    'snowpack.config.cjs',
    'snowpack.config.mjs',
    'snowpack.config.ts',
    'snowpack.config.cts',
    'snowpack.config.mts',
    'snowpack.deps.json',
    'snowpack.config.json',
  ],
  sonar_cloud: [
    'sonar-project.properties',
    '.sonarcloud.properties',
    'sonarcloud.yaml',
  ],
  svelte: [
    'svelte.config.js',
    'svelte.config.cjs',
    'svelte.config.ts',
  ],
  stackblitz: ['.stackblitzrc'],
  stencil: ['stencil.config.js', 'stencil.config.ts'],
  stitches: ['stitches.config.js', 'stitches.config.ts'],
  stylelint: [
    '.stylelintrc',
    'stylelint.config.js',
    'stylelint.config.cjs',
    'stylelint.config.mjs',
    '.stylelintrc.json',
    '.stylelintrc.yaml',
    '.stylelintrc.yml',
    '.stylelintrc.js',
    '.stylelintrc.cjs',
    '.stylelintrc.mjs',
  ],
  stylelint_ignore: ['.stylelintignore', '.stylelintcache'],
  swagger: ['swagger.json', 'swagger.yml', 'swagger.yaml'],
  syncpack: [
    '.syncpackrc',
    'syncpackrc.json',
    '.syncpackrc.yaml',
    '.syncpackrc.yml',
    '.syncpackrc.js',
    '.syncpackrc.cjs',
    'syncpack.config.js',
    'syncpack.config.cjs',
  ],
  tailwind: [
    'tailwind.js',
    'tailwind.ts',
    'tailwind.config.js',
    'tailwind.config.mjs',
    'tailwind.config.cjs',
    'tailwind.config.ts',
    'tailwind.config.cts',
    'tailwind.config.mts',
    'tailwind.css',
  ],
  task: [
    'taskfile.yml',
    'taskfile.yaml',
    'taskfile.dist.yml',
    'taskfile.dist.yaml',
  ],
  tauri: [
    'tauri.conf.json',
    'tauri.config.json',
    'tauri.linux.conf.json',
    'tauri.windows.conf.json',
    'tauri.macos.conf.json',
  ],
  taurignore: ['.taurignore'],
  textlint: [
    '.textlintrc',
    '.textlintrc.js',
    '.textlintrc.json',
    '.textlintrc.yml',
    '.textlintrc.yaml',
  ],
  todo: ['todo', 'todo.txt', 'todo.md'],
  travis: ['.travis.yml'],
  typescript_config: [
    'tsconfig.json',
    'tsconfig.app.json',
    'tsconfig.editor.json',
    'tsconfig.spec.json',
    'tsconfig.base.json',
    'tsconfig.build.json',
    'tsconfig.eslint.json',
    'tsconfig.lib.json',
    'tsconfig.lib.prod.json',
    'tsconfig.node.json',
    'tsconfig.test.json',
    'tsconfig.e2e.json',
    'tsconfig.web.json',
    'tsconfig.webworker.json',
    'tsconfig.worker.json',
    'tsconfig.config.json',
    'tsconfig.vitest.json',
    'tsconfig.cjs.json',
    'tsconfig.esm.json',
    'tsconfig.mjs.json',
    'tsconfig.doc.json',
  ],
  unocss: [
    'uno.config.js',
    'uno.config.ts',
    'unocss.config.js',
    'unocss.config.ts',
  ],
  v: ['vpkg.json', 'v.mod'],
  vercel: ['vercel.json', 'now.json'],
  vercel_ignore: ['.vercelignore', '.nowignore'],
  vite: [
    'vite.config.js',
    'vite.config.mjs',
    'vite.config.cjs',
    'vite.config.ts',
    'vite.config.cts',
    'vite.config.mts',
    'vite.config.js',
    'vite.config.mjs',
    'vite.config.cjs',
    'vite.config.ts',
    'vite.config.cts',
    'vite.config.mts',
  ],
  vitest: [
    'vitest.config.js',
    'vitest.config.mjs',
    'vitest.config.cjs',
    'vitest.config.ts',
    'vitest.config.cts',
    'vitest.config.mts',
    'vitest.config.js',
    'vitest.config.mjs',
    'vitest.config.cjs',
    'vitest.config.ts',
    'vitest.config.cts',
    'vitest.config.mts',
  ],
  vue_config: [
    'vue.config.js',
    'vue.config.ts',
    'vetur.config.js',
    'vetur.config.ts',
    'volar.config.js',
  ],
  wallaby: ['wallaby.js', 'wallaby.conf.js'],
  watchman: ['.watchmanconfig'],
  webpack: [
    'webpack.js',
    'webpack.cjs',
    'webpack.mjs',
    'webpack.ts',
    'webpack.cts',
    'webpack.mts',
    'webpack.base.js',
    'webpack.base.cjs',
    'webpack.base.mjs',
    'webpack.base.ts',
    'webpack.base.cts',
    'webpack.base.mts',
    'webpack.config.js',
    'webpack.config.cjs',
    'webpack.config.mjs',
    'webpack.config.ts',
    'webpack.config.cts',
    'webpack.config.mts',
    'webpack.common.js',
    'webpack.common.cjs',
    'webpack.common.mjs',
    'webpack.common.ts',
    'webpack.common.cts',
    'webpack.common.mts',
    'webpack.config.common.js',
    'webpack.config.common.cjs',
    'webpack.config.common.mjs',
    'webpack.config.common.ts',
    'webpack.config.common.cts',
    'webpack.config.common.mts',
    'webpack.config.common.babel.js',
    'webpack.config.common.babel.ts',
    'webpack.dev.js',
    'webpack.dev.cjs',
    'webpack.dev.mjs',
    'webpack.dev.ts',
    'webpack.dev.cts',
    'webpack.dev.mts',
    'webpack.development.js',
    'webpack.development.cjs',
    'webpack.development.mjs',
    'webpack.development.ts',
    'webpack.development.cts',
    'webpack.development.mts',
    'webpack.config.dev.js',
    'webpack.config.dev.cjs',
    'webpack.config.dev.mjs',
    'webpack.config.dev.ts',
    'webpack.config.dev.cts',
    'webpack.config.dev.mts',
    'webpack.config.dev.babel.js',
    'webpack.config.dev.babel.ts',
    'webpack.mix.js',
    'webpack.mix.cjs',
    'webpack.mix.mjs',
    'webpack.mix.ts',
    'webpack.mix.cts',
    'webpack.mix.mts',
    'webpack.prod.js',
    'webpack.prod.cjs',
    'webpack.prod.mjs',
    'webpack.prod.ts',
    'webpack.prod.cts',
    'webpack.prod.mts',
    'webpack.prod.config.js',
    'webpack.prod.config.cjs',
    'webpack.prod.config.mjs',
    'webpack.prod.config.ts',
    'webpack.prod.config.cts',
    'webpack.prod.config.mts',
    'webpack.production.js',
    'webpack.production.cjs',
    'webpack.production.mjs',
    'webpack.production.ts',
    'webpack.production.cts',
    'webpack.production.mts',
    'webpack.server.js',
    'webpack.server.cjs',
    'webpack.server.mjs',
    'webpack.server.ts',
    'webpack.server.cts',
    'webpack.server.mts',
    'webpack.client.js',
    'webpack.client.cjs',
    'webpack.client.mjs',
    'webpack.client.ts',
    'webpack.client.cts',
    'webpack.client.mts',
    'webpack.config.server.js',
    'webpack.config.server.cjs',
    'webpack.config.server.mjs',
    'webpack.config.server.ts',
    'webpack.config.server.cts',
    'webpack.config.server.mts',
    'webpack.config.client.js',
    'webpack.config.client.cjs',
    'webpack.config.client.mjs',
    'webpack.config.client.ts',
    'webpack.config.client.cts',
    'webpack.config.client.mts',
    'webpack.config.production.babel.js',
    'webpack.config.production.babel.ts',
    'webpack.config.prod.babel.js',
    'webpack.config.prod.babel.cjs',
    'webpack.config.prod.babel.mjs',
    'webpack.config.prod.babel.ts',
    'webpack.config.prod.babel.cts',
    'webpack.config.prod.babel.mts',
    'webpack.config.prod.js',
    'webpack.config.prod.cjs',
    'webpack.config.prod.mjs',
    'webpack.config.prod.ts',
    'webpack.config.prod.cts',
    'webpack.config.prod.mts',
    'webpack.config.production.js',
    'webpack.config.production.cjs',
    'webpack.config.production.mjs',
    'webpack.config.production.ts',
    'webpack.config.production.cts',
    'webpack.config.production.mts',
    'webpack.config.staging.js',
    'webpack.config.staging.cjs',
    'webpack.config.staging.mjs',
    'webpack.config.staging.ts',
    'webpack.config.staging.cts',
    'webpack.config.staging.mts',
    'webpack.config.babel.js',
    'webpack.config.babel.ts',
    'webpack.config.base.babel.js',
    'webpack.config.base.babel.ts',
    'webpack.config.base.js',
    'webpack.config.base.cjs',
    'webpack.config.base.mjs',
    'webpack.config.base.ts',
    'webpack.config.base.cts',
    'webpack.config.base.mts',
    'webpack.config.staging.babel.js',
    'webpack.config.staging.babel.ts',
    'webpack.config.coffee',
    'webpack.config.test.js',
    'webpack.config.test.cjs',
    'webpack.config.test.mjs',
    'webpack.config.test.ts',
    'webpack.config.test.cts',
    'webpack.config.test.mts',
    'webpack.config.vendor.js',
    'webpack.config.vendor.cjs',
    'webpack.config.vendor.mjs',
    'webpack.config.vendor.ts',
    'webpack.config.vendor.cts',
    'webpack.config.vendor.mts',
    'webpack.config.vendor.production.js',
    'webpack.config.vendor.production.cjs',
    'webpack.config.vendor.production.mjs',
    'webpack.config.vendor.production.ts',
    'webpack.config.vendor.production.cts',
    'webpack.config.vendor.production.mts',
    'webpack.test.js',
    'webpack.test.cjs',
    'webpack.test.mjs',
    'webpack.test.ts',
    'webpack.test.cts',
    'webpack.test.mts',
    'webpack.dist.js',
    'webpack.dist.cjs',
    'webpack.dist.mjs',
    'webpack.dist.ts',
    'webpack.dist.cts',
    'webpack.dist.mts',
    'webpackfile.js',
    'webpackfile.cjs',
    'webpackfile.mjs',
    'webpackfile.ts',
    'webpackfile.cts',
    'webpackfile.mts',
  ],
  windi: [
    'windi.config.js',
    'windi.config.cjs',
    'windi.config.ts',
    'windi.config.cts',
    'windi.config.json',
  ],
  xmake: ['xmake.lua'],
  yaml: ['.yamllint', '.yamllint.yml', '.yamllint.yaml'],
  yarn: [
    '.yarnrc',
    '.yarnclean',
    '.yarn-integrity',
    'yarn-error.log',
    '.yarnrc.yml',
    '.yarnrc.yaml',
  ],
  yarn_lock: ['yarn.lock'],
}
